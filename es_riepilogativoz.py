# -*- coding: utf-8 -*-
"""es_riepilogativoz.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wI3gA_ITQL-4_fBvagqWvvcib9zYx4YW
"""

import os
!pip install rtree
!curl -L http://download.osgeo.org/libspatialindex/spatialindex-src-1.8.5.tar.gz | tar xz
os.chdir("/content/spatialindex-src-1.8.5")
!./configure
!make
!make install
!ldconfig

!pip install geopandas
!pip install contextily

import geopandas
import pandas as pd
import contextily
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

bike_area = geopandas.read_file("/content/drive/MyDrive/bike_area_sosta/bike_areesosta.zip")
bike_area

stradario = pd.read_csv("/content/drive/MyDrive/stradario/stradario.csv")
stradario.head()

"""1) una lista (elenco) delle aree di sosta, indicando il nome della via, il numero civico e il numero di posti totali per le biciclette"""

bike_area['id_via'] = pd.to_numeric(bike_area['id_via'])
stradario['CODICE_VIA'] = pd.to_numeric(stradario['CODICE_VIA'])

stradario_sd = stradario.drop_duplicates(subset = ["CODICE_VIA"])
stradario_sd

Straike = pd.merge(bike_area, stradario_sd, how = "left", left_on = ['id_via'], right_on = ['CODICE_VIA'])
Straike

Straike[["DESCRIZIONE_VIA","CIVICO", "stalli_tot"]]

"""2) una lista (elenco) analogo al precedente ma con anche  l'indicazione del quartiere"""

milano = geopandas.read_file("/content/drive/MyDrive/ds964_nil_wm (1).zip")
milano.head()

Straike_milano = geopandas.sjoin(Straike, milano, op = "within", how = "left")
Straike_milano.head()

Straike_milano[["stalli_tot","DESCRIZIONE_VIA","CIVICO", "NIL"]]

"""3) i nomi dei quartieri in cui non ci sono aree di sosta;"""

ax = Straike_milano.plot(figsize = (10, 10), markersize = 5)
milano.plot(ax = ax, facecolor = "none", edgecolor = "k")

Straike_milano["NIL"]

milano[~milano.NIL.isin(Straike_milano["NIL"])]

"""4) una mappa di Milano con l'indicazione dei quartieri in cui non ci sono aree di sosta"""

milano[~milano.NIL.isin(Straike_milano["NIL"])].plot()

"""5) il nome del quartiere con più aree di sosta;"""

Straike_groupby = Straike_milano.groupby("NIL").count()[["id_via"]].reset_index()
Straike_groupby

max_aree = Straike_groupby[Straike_groupby.id_via == Straike_groupby.id_via.max()]
max_aree

"""6) una mappa di Milano con l'indicazione del quartiere con più aree di sosta;"""

milano_max = pd.merge(milano, max_aree, how = "inner", on = "NIL")
milano_max

ax = milano_max.to_crs(epsg =3857).plot(figsize = (10, 10), facecolor = "k", alpha = 0.5)
contextily.add_basemap(ax)

"""7) i nomi dei quartieri con un numero di aree di sosta minori della media;




"""

media_aree = Straike_groupby.id_via.mean()
media_aree

min_q = Straike_groupby[Straike_groupby.id_via < media_aree]
min_q

"""8) una mappa di Milano con l'indicazione  dei quartieri con un numero di aree di sosta minori della media;"""

milano_min = pd.merge(milano, min_q, how = "inner", on = "NIL")
milano_min.head()

ax = milano_min.to_crs(epsg =3857).plot(figsize = (10, 10), edgecolor = "k", facecolor = "k", alpha = 0.5, linewidth = 3)
contextily.add_basemap(ax)

"""9) una mappa di Milano con i diversi quartieri contornati in nero e l'indicazione delle aree di sosta, sottoforma di punti rossi;"""

ax = milano.to_crs(epsg =3857).plot(figsize = (10, 10), edgecolor = "k", facecolor = "k", alpha = 0.5)
Straike_milano.to_crs(epsg =3857).plot(color = "red", ax = ax, markersize = 3)
contextily.add_basemap(ax)

"""10) una mappa di Milano con i diversi quartieri colorati a seconda del numero di aree di sosta presenti, con una legenda che indichi il significato dei colori;

"""

Straike_milano.head()

Straike_milano_fin = Straike_milano.groupby('NIL').count().reset_index()
Straike_milano_fin

Straike_milano_fin2 = pd.merge(Straike_milano_fin, milano,  how = "left", on = ['NIL'])
Straike_milano_fin2

Straike_milano_fin2.rename(columns = {'geometry_y':'geometry'}, inplace = True)

ax = Straike_milano_fin2.to_crs(epsg = 3857).plot(figsize = (12 , 6), column = "id_via", legend=True, alpha = 0.5, edgecolor = "k")
contextily.add_basemap(ax)

"""11) data una via (inserita dall'utente), avere le aree di sosta di quella via"""

via = input("Inserisci una via: ")

if via in list(Straike_milano_fin.DESCRIZIONE_VIA):
  print(Straike_milano_fin[Straike_milano_fin["DESCRIZIONE_VIA"] == via])
else:
  print("La via da te inserita non è presente all'interno del geodataframe")

"""12) dato un quartiere (inserito dall'utente), avere la mappa di quel quartiere con l'indicazione della posizione delle aree di sosta"""

quartiere_input = input("Inserisci il nome di un quartiere: ")

if quartiere_input in list(milano.NIL):

  quartiere= milano[milano["NIL"] == quartiere_input]

  bike_area_quartiere = bike_area[bike_area.intersects(quartiere.unary_union)]
  bike_area_quartiere

  ax = quartiere.to_crs(epsg=3857).plot(figsize=(15,15), alpha= 0.5, edgecolor= "k", linewidth= 3)
  bike_area_quartiere.to_crs(epsg=3857).plot(ax=ax, color= "r")
  contextily.add_basemap(ax)
else:
  print("Il quartiere da te inserito non è presente all'inetrnmo del geodataframe")

"""13) date le coordinate geografiche di un punto (inserite dall'utente), avere una mappa che visualizzi le aree di sosta a meno di 500 m da quel punto;"""

from shapely.geometry import Point

longitudine = float(input("Inserisci la longitudine: "))
latitudine = float(input("Inserisci la latitudine: "))
#9.191383, 45.464211 (coordinate del duomo)

punto = Point(longitudine, latitudine)
punto

buffer_punto = punto.buffer(0.0044) # 500 gradi in metri sono 0.0044 metri
aree_sosta_meno500 =  bike_area[bike_area.within(buffer_punto)]

ax = aree_sosta_meno500.to_crs(epsg=3857).plot(figsize=(15,15), color= "r")
contextily.add_basemap(ax)