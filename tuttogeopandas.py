# -*- coding: utf-8 -*-
"""tuttogeopandas

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NfRAJiA2uiZ2J0GpomVoPFMjBOCheDbK
"""

!pip install geopandas

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import pandas as pd 
import geopandas

pip install contextily

import contextily

#caricare quartieri
milano = geopandas.read_file("/content/drive/MyDrive/ds964_nil_wm (1).zip")
milano

milano.plot()

#visualizza intestazione
milano.columns

#cercare il quartiere duomo di milano
from shapely.geometry import Point

Duomo=Point(9.190364,45.463938)

ax = milano[milano.contains(Duomo)].to_crs(epsg=3857).plot(figsize=(10,8),facecolor="none",edgecolor="k")
geopandas.GeoSeries([Duomo],crs="EPSG:4326").to_crs(epsg=3857).plot(ax=ax,color="red")
contextily.add_basemap(ax)

print("7.visualizzare i quartieri vicini a quello che contiene il duomo")
ViciniDuomo=milano[milano.touches(milano[milano.contains(Duomo)].geometry.squeeze())]
ax=ViciniDuomo.to_crs(epsg=3857).plot(figsize=(10,8),facecolor="none",edgecolor="k")
contextily.add_basemap(ax)

"""2"""

comuni = geopandas.read_file("/content/drive/MyDrive/Limiti01012021_g/Com01012021_g")
province = geopandas.read_file("/content/drive/MyDrive/Limiti01012021_g/ProvCM01012021_g")
regioni = geopandas.read_file("/content/drive/MyDrive/Limiti01012021_g/Reg01012021_g")

#Visualizzi la mappa d'Italia con tutte le regioni. Fare in modo che i confini delle regioni siano in blu e che sia visibile al di sotto delle regioni la cartina geografica dell'Italia
ax = regioni.to_crs(epsg=3857).plot(figsize =(12, 10), facecolor='none', edgecolor='blue')
contextily.add_basemap(ax)

#Sostituire alla cartina geografica dell'Italia un altro tipo di mappa
import xyzservices.providers as xyz
ax = regioni.to_crs(epsg=3857).plot(figsize =(12, 10), facecolor='none', edgecolor='blue')
contextily.add_basemap(ax, source=contextily.providers.Stamen.TonerLite)

#Visualizzare le province della Lombardia su una mappa di contextily
province_lombardia = province[province['COD_REG']==3]
province_lombardia

lombardia = regioni.loc[regioni['DEN_REG'] == 'Lombardia', 'geometry'].squeeze()

ax = province_lombardia.to_crs(epsg=3857).plot(figsize=(20, 10), facecolor= "none", edgecolor= "k")
contextily.add_basemap(ax, source=contextily.providers.OpenStreetMap.Mapnik)

#Visualizzare la provincia di Milano su una mappa di contextily con i confini amministrativi del comune di Milano. Usare colori adatti
milano = province.loc[province['DEN_CM'] == 'Milano', 'geometry'].squeeze()

comuni_milano = comuni[comuni.within(milano)]
ax = comuni_milano.to_crs(epsg= 3857).plot(figsize= (10, 12), facecolor = "none", edgecolor = "b")
contextily.add_basemap(ax, source=contextily.providers.OpenStreetMap.Mapnik)

#Utilizzando le informazioni geografiche riguardanti i quartieri di Milano, visualizzare sia i confini di Milano sia i confini dei quartier

quartieri_milano = geopandas.read_file('/content/drive/MyDrive/Colab Notebooks/ds964_nil_wm.zip')

quartieri_milano.head()

ax = quartieri_milano.to_crs(epsg= 3857).plot(figsize= (10, 12), facecolor = "none", edgecolor = "b")
contextily.add_basemap(ax, source=contextily.providers.OpenStreetMap.Mapnik)

"""3"""

bikes = geopandas.read_file("/content/drive/MyDrive/Colab Notebooks/bike_ciclabili.zip")
bikes

bikes.plot()

Mquartieri = geopandas.read_file("/content/drive/MyDrive/ds964_nil_wm (1).zip")
Mquartieri

#quartieri di milano e piste ciclabili
ax= Mquartieri.to_crs(epsg=3857).plot(figsize=(20, 10), facecolor= "none", edgecolor= "k")
bikes.to_crs(epsg=3857).plot(ax=ax)
contextily.add_basemap(ax)

#media superficie quartiere
q= Mquartieri["Shape_Area"].mean()
q

#quartieri con shape area maggiore della media
quartieriG = Mquartieri[Mquartieri["Shape_Area"] > q]
quartieriG

#in rosso quartieri con shape area maggiore della media
ax= Mquartieri.to_crs(epsg=3857).plot(figsize=(20, 10), facecolor= "none", edgecolor= "k")
quartieriG.to_crs(epsg=3857).plot(ax=ax,facecolor= "none", edgecolor= "red")
contextily.add_basemap(ax)

"""4"""

#piste ciclabili in via melchiorre gioia
mgioia=bikes[bikes.anagrafica=="VIA MELCHIORRE GIOIA"]
mgioia

mgioia.plot()

#colorata di giallo
ax= Mquartieri.to_crs(epsg=3857).plot(figsize=(20, 10), facecolor= "none", edgecolor= "k")
quartieriG.to_crs(epsg=3857).plot(ax=ax,facecolor= "yellow", edgecolor= "red")
contextily.add_basemap(ax)

"""5"""

bikes = geopandas.read_file("/content/drive/MyDrive/Colab Notebooks/bike_ciclabili.zip")
bikes

# visualizzaere il geodataset delel piste ciclabili
bikes.plot()

## caricare il geodataset dei quartieri di Milano ds964_nil_wm.zip
quartieri_milano = geopandas.read_file('/content/drive/MyDrive/Colab Notebooks/ds964_nil_wm.zip')

# installare (se necessario) e importare contextily e visualizzare la mappa di Milano con l'indicazione dei quartieri in nero (solo confini)
# e le piste ciclabili
ax= quartieri_milano.to_crs(epsg=3857).plot(figsize=(20, 10), facecolor= "none", edgecolor= "k")
bikes.to_crs(epsg=3857).plot(ax=ax)
contextily.add_basemap(ax)

# trovare il quartiere meno esteso
minimo = min(quartieri_milano["Shape_Area"])
tabellaMin= quartieri_milano.loc[quartieri_milano["Shape_Area"]==minimo]

# trovare il quartiere più esteso
massimo = max(quartieri_milano["Shape_Area"])
tabellaMax= quartieri_milano.loc[quartieri_milano["Shape_Area"]==massimo]

## visualizzare i due quartieri sulla mappa di Milano con i colori indicati nella figura sotto
ax= tabellaMax.to_crs(epsg=3857).plot(figsize=(20, 10), facecolor= "yellow", edgecolor= "k")
tabellaMin.to_crs(epsg=3857).plot(ax=ax,facecolor= "red")
#tabellaMax.to_crs(epsg=3857).plot(ax=ax,facecolor= "yellow")
contextily.add_basemap(ax)

# salvare in un geodataframe le informazioni sul quartiere di Affori, prendendole dal geodataframe dei quartieri
risultato=quartieri_milano.loc[quartieri_milano["NIL"]=="AFFORI"]
risultato

"""6"""

parchi = geopandas.read_file("/content/drive/MyDrive/Colab Notebooks/Parchi_regionali_e_nazionali_polygon")
parchi

comuni= geopandas.read_file("/content/drive/MyDrive/Limiti01012021_g/Com01012021_g")
comuni

province = geopandas.read_file("/content/drive/MyDrive/Limiti01012021_g/ProvCM01012021_g")
province

#visualizzi i parchi di Milano e i comuni che vi fanno parte
provinceM = province.loc[province["SIGLA"]=="MI", "geometry"].squeeze()
provinceM

comuniM = comuni[comuni.within(provinceM)]
comuniM

parchiM =  parchi[parchi.within(provinceM)]
parchiM

ax= comuniM.to_crs(epsg=3857).plot(figsize=(24,12),facecolor="none",edgecolor="k")
parchiM.to_crs(epsg=3857).plot(ax=ax)
contextily.add_basemap(ax)



#nalogo al primo esercizio ma tracciando sulla mappa solo i quartieri di Milano attraversati da parchi (e non tutta la città)
parchiQ = parchi[parchi.within(quartieri_milano)]
parchiQ